/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.*;
import spark.ModelAndView;
import spark.template.velocity.VelocityTemplateEngine;
import static spark.Spark.*;

public class App {

	public static void main(String[] args) {
		String layout = "templates/layout.vtl";
		String customerlayout = "templates/customerlayout.vtl";
    staticFileLocation("/public");

		get("/", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("template", "templates/index.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

		get("/allProducts", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
			model.put("products", Product.all());
      model.put("template", "templates/allProducts.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

		post("/allProducts/:product_id/delete", (request, response) -> {
      int productId = Integer.parseInt(request.params("product_id"));
      Product.find(Integer.parseInt(request.params(":product_id"))).delete();
      response.redirect("/allProducts");
      return null;
    });

		post("allProducts/:product_id/restock", (request, response) -> {
      int productId = Integer.parseInt(request.params("product_id"));
      Product.find(Integer.parseInt(request.params(":product_id"))).restock();
      response.redirect("/allProducts");
      return null;
    });


		get("/products/new", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("template", "templates/product-form.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());


		post("/allProducts", (request, response) -> {
		 String productName = request.queryParams("product-name");
		 String productDescription = request.queryParams("product-description");
		 int productPrice = Integer.parseInt(request.queryParams("product-price"));
			Product newProduct = new Product(productName,productDescription,productPrice);
			newProduct.save();
		 response.redirect("/allProducts");
			return null;
	  }, new VelocityTemplateEngine());


		get("/reports", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("all-transactions", Transaction.all());
      model.put("monthly-transactions",Transaction.findMonthlyTransactions());
      model.put("quarterly-transactions",Transaction.findQuarterlyTransactions());
      model.put("Transaction", Transaction.class);
      model.put("template", "templates/reports.vtl");
      return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());

	 get("/calendar", (request, response) -> {
		 Map<String, Object> model = new HashMap<String, Object>();
		 model.put("template", "templates/calendar.vtl");
		 return new ModelAndView(model, layout);
	 }, new VelocityTemplateEngine());


	 get("/login", (request, response) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("template", "templates/login.vtl");
		return new ModelAndView(model, customerlayout);
	}, new VelocityTemplateEngine());

	get("/users/:id", (request, response) -> {
		 Map<String, Object> model = new HashMap<String, Object>();
			model.put("customer",Customer.find(Integer.parseInt(request.params(":id"))));

		 model.put("products", Product.all());
		 model.put("template", "templates/customer-product.vtl");
		 return new ModelAndView(model, customerlayout);
	}, new VelocityTemplateEngine());

	post("/users/:id", (request, response) -> {
      String customerName = request.queryParams("customer-name");
      String customerEmail = request.queryParams("customer-email");
      Customer newCustomer = new Customer(customerName, customerEmail);
      newCustomer.save();
      response.redirect("/users/" + newCustomer.getId());
      return null;
    });






	post("/users/:customer_id/products/:product_id/purchase", (request, response) -> {
      int customerId = Integer.parseInt(request.params("customer_id"));
      int productId = Integer.parseInt(request.params("product_id"));
      int salePrice;
        Product someProduct = Product.find(productId);
        salePrice = someProduct.getPrice();


      try{
        someProduct.depleteQuantity(1);
      }
      catch(UnsupportedOperationException e){
        request.session().attribute("message", e.getMessage());
        response.redirect("/users/" + customerId + "/products/" + productId + "/outofstock");
      }
      Transaction newTransaction = new Transaction(productId, customerId);
      newTransaction.save();
      response.redirect("/users/" + customerId + "/products/" + productId + "/transactions/" + newTransaction.getId());
      return null;
    });

		get("/users/:customer_id/products/:product_id/transactions/:transaction_id", (request, response) -> {
      Map<String, Object> model = new HashMap<String, Object>();
      model.put("customer", Customer.find(Integer.parseInt(request.params(":customer_id"))));
      int productId = Integer.parseInt(request.params("product_id"));

        model.put("product", Product.find(Integer.parseInt(request.params(":product_id"))));

      model.put("transaction", Transaction.find(Integer.parseInt(request.params(":transaction_id"))));
      model.put("template", "templates/transaction-receipt.vtl");
      return new ModelAndView(model, customerlayout);
    }, new VelocityTemplateEngine());

			get("/users/:customer_id/products/:product_id/outofstock", (request, response) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		int customerId = Integer.parseInt(request.params("customer_id"));
		model.put("id", customerId);
		model.put("message", request.session().attribute("message"));
		model.put("template", "templates/out-of-stock.vtl");
	 return new ModelAndView(model, layout);
	}, new VelocityTemplateEngine());

	ProcessBuilder process = new ProcessBuilder();
     Integer port;
     if (process.environment().get("PORT") != null) {
         port = Integer.parseInt(process.environment().get("PORT"));
     } else {
         port = 4567;
     }

    setPort(port);





	}
}
